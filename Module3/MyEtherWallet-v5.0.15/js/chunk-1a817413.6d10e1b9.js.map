{"version":3,"sources":["webpack:///./node_modules/web3-eth-iban/node_modules/web3-utils/src/utils.js","webpack:///./node_modules/web3-eth-abi/src/types/bool.js","webpack:///./node_modules/web3-eth-abi/src/types/dynamicbytes.js","webpack:///./node_modules/web3-eth-abi/node_modules/web3-core-helpers/src/index.js","webpack:///./node_modules/web3-eth-iban/node_modules/bn.js/lib/bn.js","webpack:///./node_modules/web3-eth-abi/node_modules/web3-utils/src/index.js","webpack:///./node_modules/web3-eth-abi/node_modules/web3-utils/src/soliditySha3.js","webpack:///./node_modules/web3-eth-abi/src/formatters.js","webpack:///./node_modules/web3-eth-abi/node_modules/web3-utils/src/utils.js","webpack:///./node_modules/isomorphic-fetch/fetch-npm-browserify.js","webpack:///./node_modules/web3-eth-abi/node_modules/web3-core-helpers/src/errors.js","webpack:///./node_modules/web3-eth-abi/src/param.js","webpack:///./node_modules/web3-eth-abi/src/types/bytes.js","webpack:///./node_modules/web3-eth-abi/node_modules/bn.js/lib/bn.js","webpack:///./node_modules/web3-eth-abi/src/types/uint.js","webpack:///./node_modules/web3-eth-iban/node_modules/web3-utils/src/soliditySha3.js","webpack:///./node_modules/web3-eth-abi/src/types/address.js","webpack:///./node_modules/web3-eth-abi/src/index.js","webpack:///./node_modules/web3-eth-abi/src/types/int.js","webpack:///./node_modules/web3-eth-iban/src/index.js","webpack:///./node_modules/web3-eth-abi/node_modules/web3-core-helpers/src/formatters.js","webpack:///./node_modules/web3-eth-iban/node_modules/web3-utils/src/index.js","webpack:///./node_modules/web3-eth-abi/src/type.js","webpack:///./node_modules/web3-eth-abi/src/types/string.js"],"names":["_","__webpack_require__","BN","numberToBN","utf8","Hash","isBN","object","constructor","name","isBigNumber","toBN","number","apply","arguments","e","Error","toTwosComplement","toTwos","toString","isAddress","address","test","checkAddressChecksum","replace","addressHash","sha3","toLowerCase","i","parseInt","toUpperCase","leftPad","string","chars","sign","hasPrefix","padding","length","Array","join","rightPad","utf8ToHex","str","encode","hex","split","reverse","code","charCodeAt","n","hexToUtf8","isHexStrict","l","substr","String","fromCharCode","decode","hexToNumber","value","toNumber","hexToNumberString","numberToHex","isNull","isUndefined","isFinite","result","lt","bytesToHex","bytes","push","hexToBytes","c","toHex","returnType","isBoolean","isObject","JSON","stringify","isString","indexOf","isNumber","isHex","isBloom","bloom","isTopic","topic","SHA3_NULL_S","returnValue","keccak256","_Hash","module","exports","f","SolidityType","SolidityTypeBool","this","_inputFormatter","formatInputBool","_outputFormatter","formatOutputBool","prototype","isType","match","SolidityTypeDynamicBytes","formatInputDynamicBytes","formatOutputDynamicBytes","isDynamicType","errors","formatters","assert","val","msg","inherits","ctor","superCtor","super_","TempCtor","base","endian","negative","words","red","_init","Buffer","wordSize","parseHex","start","end","r","len","Math","min","parseBase","mul","num","isArray","max","left","right","cmp","_initNumber","_initArray","_parseHex","_parseBase","strip","toArray","ceil","j","w","off","limbLen","limbPow","total","mod","word","imuln","_iaddn","pow","copy","dest","clone","_expand","size","_normSign","inspect","zeros","groupSizes","groupBases","toBitArray","bitLength","bit","wbit","smallMulTo","self","out","a","b","lo","carry","k","ncarry","rword","maxJ","groupSize","groupBase","isZero","modn","idivn","ret","toJSON","toBuffer","toArrayLike","ArrayType","byteLength","reqLength","littleEndian","res","q","andln","iushrn","clz32","_countBits","t","_zeroBits","hi","zeroBits","width","abs","inotn","iaddn","fromTwos","testn","notn","ineg","isNeg","neg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","iadd","isub","add","sub","comb10MulTo","mid","o","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","imul","w0","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","bigMulTo","hncarry","jumboMulTo","fftm","FFTM","mulp","x","y","mulTo","makeRBT","N","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","s","rtwdf","cos","PI","itwdf","sin","p","rtwdf_","itwdf_","re","ie","ro","io","rx","guessLen13b","m","odd","conjugate","normalize13b","ws","round","convert13b","stub","ph","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","muln","sqr","isqr","iushln","bits","carryMask","newCarry","ishln","hint","extended","h","mask","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","shift","_wordDiv","mode","bhi","bhiBits","diff","qj","div","divmod","positive","divn","umod","divRound","dm","half","r2","acc","egcd","A","B","C","D","g","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gt","gten","gte","ltn","lten","lte","eqn","eq","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","tmp","_tmp","K256","call","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","imulK","input","output","outLen","prev","next","mod3","one","nOne","lpow","z","inv","windowSize","wnd","current","currentLen","mont","u","ethjsUnit","utils","soliditySha3","randomHex","_fireError","error","emitter","reject","callback","data","message","isFunction","listeners","catch","setTimeout","emit","removeAllListeners","_jsonInterfaceMethodToString","json","typeName","inputs","map","type","hexToAscii","substring","asciiToHex","getUnitValue","unit","unitMap","fromWei","toWei","toChecksumAddress","checksumAddress","toDecimal","fromDecimal","hexToString","toUtf8","stringToHex","fromUtf8","toAscii","fromAscii","padLeft","padRight","_elementaryName","startsWith","slice","_parseTypeN","typesize","exec","_parseTypeNArray","arraySize","_parseNumber","arg","_solidityPack","_processSoliditySha3Args","hexArg","hasOwnProperty","v","args","hexArgs","SolidityParam","formatInputInt","trunc","formatInputBytes","floor","formatInputString","signedIsNegative","formatOutputInt","param","staticPart","rawValue","formatOutputUInt","formatOutputBytes","matches","dynamicPart","formatOutputString","formatOutputAddress","fetch","bind","ErrorResponse","InvalidNumberOfParams","got","expected","method","InvalidConnection","host","InvalidProvider","InvalidResponse","ConnectionTimeout","ms","offset","dynamicPartLength","withOffset","combine","isDynamic","undefined","offsetAsBytes","encodeList","params","totalOffset","offsetParams","reduce","SolidityTypeBytes","SolidityTypeUInt","SolidityTypeAddress","inputAddressFormatter","SolidityTypeInt","SolidityTypeString","solidityType","isDynamicArray","Result","ABICoder","types","_types","_requireType","filter","_getOffsets","solidityTypes","lengths","index","staticPartLength","_getSolidityTypes","_encodeMultiWithOffset","encodeds","dynamicOffset","forEach","_encodeWithOffset","encoded","nestedName","nestedStaticPartLength","previousLength","additionalOffset","isStaticArray","encodeFunctionSignature","functionName","encodeEventSignature","encodeParameter","encodeParameters","roundedStaticPartLength","encodeFunctionCall","jsonInterface","decodeParameter","decodeParameters","outputs","isTypeArray","offsets","__length__","count","decodedValue","decodeLog","topics","notIndexedInputs","indexedInputs","indexed","nonIndexedData","indexedData","notIndexedParams","indexedParams","coder","BigNumber","iso13616Prepare","iban","Z","mod9710","block","remainder","Iban","_iban","toAddress","ib","isDirect","toIban","fromAddress","asBn","base36","padded","fromBban","bban","countryCode","checkDigit","createIndirect","options","institution","identifier","isValid","isIndirect","checksum","client","outputBigNumberFormatter","isPredefinedBlockNumber","blockNumber","inputDefaultBlockNumberFormatter","inputBlockNumberFormatter","defaultBlock","_txInputFormatter","to","gas","gasLimit","key","inputCallFormatter","from","defaultAccount","inputTransactionFormatter","inputSignFormatter","outputTransactionFormatter","tx","transactionIndex","nonce","gasPrice","outputTransactionReceiptFormatter","receipt","cumulativeGasUsed","gasUsed","logs","outputLogFormatter","contractAddress","status","Boolean","outputBlockFormatter","timestamp","difficulty","totalDifficulty","transactions","item","miner","inputLogFormatter","toTopic","addr","log","blockHash","transactionHash","logIndex","shaId","id","inputPostFormatter","post","ttl","workToProve","priority","outputPostFormatter","expiry","sent","workProved","outputSyncingFormatter","startingBlock","currentBlock","highestBlock","knownStates","pulledStates","config","inputFormatter","outputFormatter","nestedTypes","previous","staticArrayLength","arrayOffset","arrayStart","roundedNestedStaticPartLength","roundedLength"],"mappings":"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","file":"js/chunk-1a817413.6d10e1b9.js","sourcesContent":["/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\nvar utf8 = require('utf8');\nvar Hash = require(\"eth-lib/lib/hash\");\n\n\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBN = function (object) {\n    return object instanceof BN ||\n        (object && object.constructor && object.constructor.name === 'BN');\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n    return object && object.constructor && object.constructor.name === 'BigNumber';\n};\n\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */\nvar toBN = function(number){\n    try {\n        return numberToBN.apply(null, arguments);\n    } catch(e) {\n        throw new Error(e + ' Given value: \"'+ number +'\"');\n    }\n};\n\n\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */\nvar toTwosComplement = function (number) {\n    return '0x'+ toBN(number).toTwos(256).toString(16, 64);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar isAddress = function (address) {\n    // check if it has the basic requirements of an address\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        return false;\n        // If it's ALL lowercase or ALL upppercase\n    } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n        return true;\n        // Otherwise check each case\n    } else {\n        return checkAddressChecksum(address);\n    }\n};\n\n\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar checkAddressChecksum = function (address) {\n    // Check each case\n    address = address.replace(/^0x/i,'');\n    var addressHash = sha3(address.toLowerCase()).replace(/^0x/i,'');\n\n    for (var i = 0; i < 40; i++ ) {\n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar leftPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar rightPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : \"0\"));\n};\n\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar utf8ToHex = function(str) {\n    str = utf8.encode(str);\n    var hex = \"\";\n\n    // remove \\u0000 padding from either side\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        // if (code !== 0) {\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n        // }\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToUtf8 = function(hex) {\n    if (!isHexStrict(hex))\n        throw new Error('The parameter \"'+ hex +'\" must be a valid HEX string.');\n\n    var str = \"\";\n    var code = 0;\n    hex = hex.replace(/^0x/i,'');\n\n    // remove 00 padding from either side\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n\n    var l = hex.length;\n\n    for (var i=0; i < l; i+=2) {\n        code = parseInt(hex.substr(i, 2), 16);\n        // if (code !== 0) {\n        str += String.fromCharCode(code);\n        // }\n    }\n\n    return utf8.decode(str);\n};\n\n\n/**\n * Converts value to it's number representation\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumber = function (value) {\n    if (!value) {\n        return value;\n    }\n\n    return toBN(value).toNumber();\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumberString = function (value) {\n    if (!value) return value;\n\n    return toBN(value).toString(10);\n};\n\n\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar numberToHex = function (value) {\n    if (_.isNull(value) || _.isUndefined(value)) {\n        return value;\n    }\n\n    if (!isFinite(value) && !isHexStrict(value)) {\n        throw new Error('Given input \"'+value+'\" is not a number.');\n    }\n\n    var number = toBN(value);\n    var result = number.toString(16);\n\n    return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */\nvar bytesToHex = function(bytes) {\n    for (var hex = [], i = 0; i < bytes.length; i++) {\n        /* jshint ignore:start */\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n        /* jshint ignore:end */\n    }\n    return '0x'+ hex.join(\"\");\n};\n\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */\nvar hexToBytes = function(hex) {\n    hex = hex.toString(16);\n\n    if (!isHexStrict(hex)) {\n        throw new Error('Given value \"'+ hex +'\" is not a valid hex string.');\n    }\n\n    hex = hex.replace(/^0x/i,'');\n\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    return bytes;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object} value\n * @param {Boolean} returnType\n * @return {String}\n */\nvar toHex = function (value, returnType) {\n    /*jshint maxcomplexity: false */\n\n    if (isAddress(value)) {\n        return returnType ? 'address' : '0x'+ value.toLowerCase().replace(/^0x/i,'');\n    }\n\n    if (_.isBoolean(value)) {\n        return returnType ? 'bool' : value ? '0x01' : '0x00';\n    }\n\n\n    if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {\n        return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n    }\n\n    // if its a negative number, pass it through numberToHex\n    if (_.isString(value)) {\n        if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n            return returnType ? 'int256' : numberToHex(value);\n        } else if(value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n            return returnType ? 'bytes' : value;\n        } else if (!isFinite(value)) {\n            return returnType ? 'string' : utf8ToHex(value);\n        }\n    }\n\n    return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\n};\n\n\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHexStrict = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));\n};\n\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHex = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));\n};\n\n\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * TODO UNDOCUMENTED\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Returns true if given string is a valid log topic.\n *\n * TODO UNDOCUMENTED\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n        return true;\n    }\n    return false;\n};\n\n\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nvar sha3 = function (value) {\n    if (isHexStrict(value) && /^0x/i.test((value).toString())) {\n        value = hexToBytes(value);\n    }\n\n    var returnValue = Hash.keccak256(value); // jshint ignore:line\n\n    if(returnValue === SHA3_NULL_S) {\n        return null;\n    } else {\n        return returnValue;\n    }\n};\n// expose the under the hood keccak256\nsha3._Hash = Hash;\n\n\nmodule.exports = {\n    BN: BN,\n    isBN: isBN,\n    isBigNumber: isBigNumber,\n    toBN: toBN,\n    isAddress: isAddress,\n    isBloom: isBloom, // TODO UNDOCUMENTED\n    isTopic: isTopic, // TODO UNDOCUMENTED\n    checkAddressChecksum: checkAddressChecksum,\n    utf8ToHex: utf8ToHex,\n    hexToUtf8: hexToUtf8,\n    hexToNumber: hexToNumber,\n    hexToNumberString: hexToNumberString,\n    numberToHex: numberToHex,\n    toHex: toHex,\n    hexToBytes: hexToBytes,\n    bytesToHex: bytesToHex,\n    isHex: isHex,\n    isHexStrict: isHexStrict,\n    leftPad: leftPad,\n    rightPad: rightPad,\n    toTwosComplement: toTwosComplement,\n    sha3: sha3\n};\n","var f = require('../formatters');\nvar SolidityType = require('../type');\n\n/**\n * SolidityTypeBool is a protoype that represents bool type\n * It matches:\n * bool\n * bool[]\n * bool[4]\n * bool[][]\n * bool[3][]\n * bool[][6][], ...\n */\nvar SolidityTypeBool = function () {\n    this._inputFormatter = f.formatInputBool;\n    this._outputFormatter = f.formatOutputBool;\n};\n\nSolidityTypeBool.prototype = new SolidityType({});\nSolidityTypeBool.prototype.constructor = SolidityTypeBool;\n\nSolidityTypeBool.prototype.isType = function (name) {\n    return !!name.match(/^bool(\\[([0-9]*)\\])*$/);\n};\n\nmodule.exports = SolidityTypeBool;\n","var f = require('../formatters');\nvar SolidityType = require('../type');\n\nvar SolidityTypeDynamicBytes = function () {\n    this._inputFormatter = f.formatInputDynamicBytes;\n    this._outputFormatter = f.formatOutputDynamicBytes;\n};\n\nSolidityTypeDynamicBytes.prototype = new SolidityType({});\nSolidityTypeDynamicBytes.prototype.constructor = SolidityTypeDynamicBytes;\n\nSolidityTypeDynamicBytes.prototype.isType = function (name) {\n    return !!name.match(/^bytes(\\[([0-9]*)\\])*$/);\n};\n\nSolidityTypeDynamicBytes.prototype.isDynamicType = function () {\n    return true;\n};\n\nmodule.exports = SolidityTypeDynamicBytes;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar errors = require('./errors');\nvar formatters = require('./formatters');\n\nmodule.exports = {\n    errors: errors,\n    formatters: formatters\n};\n\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buf' + 'fer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\nvar _ = require('underscore');\nvar ethjsUnit = require('ethjs-unit');\nvar utils = require('./utils.js');\nvar soliditySha3 = require('./soliditySha3.js');\nvar randomHex = require('randomhex');\n\n\n\n/**\n * Fires an error in an event emitter and callback and returns the eventemitter\n *\n * @method _fireError\n * @param {Object} error a string, a error, or an object with {message, data}\n * @param {Object} emitter\n * @param {Function} reject\n * @param {Function} callback\n * @return {Object} the emitter\n */\nvar _fireError = function (error, emitter, reject, callback) {\n    /*jshint maxcomplexity: 10 */\n\n    // add data if given\n    if(_.isObject(error) && !(error instanceof Error) &&  error.data) {\n        if(_.isObject(error.data) || _.isArray(error.data)) {\n            error.data = JSON.stringify(error.data, null, 2);\n        }\n\n        error = error.message +\"\\n\"+ error.data;\n    }\n\n    if(_.isString(error)) {\n        error = new Error(error);\n    }\n\n    if (_.isFunction(callback)) {\n        callback(error);\n    }\n    if (_.isFunction(reject)) {\n        // suppress uncatched error if an error listener is present\n        // OR suppress uncatched error if an callback listener is present\n        if (emitter &&\n            (_.isFunction(emitter.listeners) &&\n            emitter.listeners('error').length) || _.isFunction(callback)) {\n            emitter.catch(function(){});\n        }\n        // reject later, to be able to return emitter\n        setTimeout(function () {\n            reject(error);\n        }, 1);\n    }\n\n    if(emitter && _.isFunction(emitter.emit)) {\n        // emit later, to be able to return emitter\n        setTimeout(function () {\n            emitter.emit('error', error);\n            emitter.removeAllListeners();\n        }, 1);\n    }\n\n    return emitter;\n};\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method _jsonInterfaceMethodToString\n * @param {Object} json\n * @return {String} full function/event name\n */\nvar _jsonInterfaceMethodToString = function (json) {\n    if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {\n        return json.name;\n    }\n\n    var typeName = json.inputs.map(function(i){return i.type; }).join(',');\n    return json.name + '(' + typeName + ')';\n};\n\n\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method hexToAscii\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToAscii = function(hex) {\n    if (!utils.isHexStrict(hex))\n        throw new Error('The parameter must be a valid HEX string.');\n\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method asciiToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar asciiToHex = function(str) {\n    if(!str)\n        return \"0x00\";\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n\n\n/**\n * Returns value of unit in Wei\n *\n * @method getUnitValue\n * @param {String} unit the unit to convert to, default ether\n * @returns {BN} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getUnitValue = function (unit) {\n    unit = unit ? unit.toLowerCase() : 'ether';\n    if (!ethjsUnit.unitMap[unit]) {\n        throw new Error('This unit \"'+ unit +'\" doesn\\'t exist, please use the one of the following units' + JSON.stringify(ethjsUnit.unitMap, null, 2));\n    }\n    return unit;\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar fromWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar toWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);\n};\n\n\n\n\n/**\n * Converts to a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @return {String}\n */\nvar toChecksumAddress = function (address) {\n    if (typeof address === 'undefined') return '';\n\n    if(!/^(0x)?[0-9a-f]{40}$/i.test(address))\n        throw new Error('Given address \"'+ address +'\" is not a valid Ethereum address.');\n\n\n\n    address = address.toLowerCase().replace(/^0x/i,'');\n    var addressHash = utils.sha3(address).replace(/^0x/i,'');\n    var checksumAddress = '0x';\n\n    for (var i = 0; i < address.length; i++ ) {\n        // If ith character is 9 to f then make it uppercase\n        if (parseInt(addressHash[i], 16) > 7) {\n            checksumAddress += address[i].toUpperCase();\n        } else {\n            checksumAddress += address[i];\n        }\n    }\n    return checksumAddress;\n};\n\n\n\nmodule.exports = {\n    _fireError: _fireError,\n    _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,\n    // extractDisplayName: extractDisplayName,\n    // extractTypeName: extractTypeName,\n    randomHex: randomHex,\n    _: _,\n    BN: utils.BN,\n    isBN: utils.isBN,\n    isBigNumber: utils.isBigNumber,\n    isHex: utils.isHex,\n    isHexStrict: utils.isHexStrict,\n    sha3: utils.sha3,\n    keccak256: utils.sha3,\n    soliditySha3: soliditySha3,\n    isAddress: utils.isAddress,\n    checkAddressChecksum: utils.checkAddressChecksum,\n    toChecksumAddress: toChecksumAddress,\n    toHex: utils.toHex,\n    toBN: utils.toBN,\n\n    bytesToHex: utils.bytesToHex,\n    hexToBytes: utils.hexToBytes,\n\n    hexToNumberString: utils.hexToNumberString,\n\n    hexToNumber: utils.hexToNumber,\n    toDecimal: utils.hexToNumber, // alias\n\n    numberToHex: utils.numberToHex,\n    fromDecimal: utils.numberToHex, // alias\n\n    hexToUtf8: utils.hexToUtf8,\n    hexToString: utils.hexToUtf8,\n    toUtf8: utils.hexToUtf8,\n\n    utf8ToHex: utils.utf8ToHex,\n    stringToHex: utils.utf8ToHex,\n    fromUtf8: utils.utf8ToHex,\n\n    hexToAscii: hexToAscii,\n    toAscii: hexToAscii,\n    asciiToHex: asciiToHex,\n    fromAscii: asciiToHex,\n\n    unitMap: ethjsUnit.unitMap,\n    toWei: toWei,\n    fromWei: fromWei,\n\n    padLeft: utils.leftPad,\n    leftPad: utils.leftPad,\n    padRight: utils.rightPad,\n    rightPad: utils.rightPad,\n    toTwosComplement: utils.toTwosComplement\n};\n\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar utils = require('./utils.js');\n\n\nvar _elementaryName = function (name) {\n    /*jshint maxcomplexity:false */\n\n    if (name.startsWith('int[')) {\n        return 'int256' + name.slice(3);\n    } else if (name === 'int') {\n        return 'int256';\n    } else if (name.startsWith('uint[')) {\n        return 'uint256' + name.slice(4);\n    } else if (name === 'uint') {\n        return 'uint256';\n    } else if (name.startsWith('fixed[')) {\n        return 'fixed128x128' + name.slice(5);\n    } else if (name === 'fixed') {\n        return 'fixed128x128';\n    } else if (name.startsWith('ufixed[')) {\n        return 'ufixed128x128' + name.slice(6);\n    } else if (name === 'ufixed') {\n        return 'ufixed128x128';\n    }\n    return name;\n};\n\n// Parse N from type<N>\nvar _parseTypeN = function (type) {\n    var typesize = /^\\D+(\\d+).*$/.exec(type);\n    return typesize ? parseInt(typesize[1], 10) : null;\n};\n\n// Parse N from type[<N>]\nvar _parseTypeNArray = function (type) {\n    var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n    return arraySize ? parseInt(arraySize[1], 10) : null;\n};\n\nvar _parseNumber = function (arg) {\n    var type = typeof arg;\n    if (type === 'string') {\n        if (utils.isHexStrict(arg)) {\n            return new BN(arg.replace(/0x/i,''), 16);\n        } else {\n            return new BN(arg, 10);\n        }\n    } else if (type === 'number') {\n        return new BN(arg);\n    } else if (utils.isBigNumber(arg)) {\n        return new BN(arg.toString(10));\n    } else if (utils.isBN(arg)) {\n        return arg;\n    } else {\n        throw new Error(arg +' is not a number');\n    }\n};\n\nvar _solidityPack = function (type, value, arraySize) {\n    /*jshint maxcomplexity:false */\n\n    var size, num;\n    type = _elementaryName(type);\n\n\n    if (type === 'bytes') {\n\n        if (value.replace(/^0x/i,'').length % 2 !== 0) {\n            throw new Error('Invalid bytes characters '+ value.length);\n        }\n\n        return value;\n    } else if (type === 'string') {\n        return utils.utf8ToHex(value);\n    } else if (type === 'bool') {\n        return value ? '01' : '00';\n    } else if (type.startsWith('address')) {\n        if(arraySize) {\n            size = 64;\n        } else {\n            size = 40;\n        }\n\n        if(!utils.isAddress(value)) {\n            throw new Error(value +' is not a valid address, or the checksum is invalid.');\n        }\n\n        return utils.leftPad(value.toLowerCase(), size);\n    }\n\n    size = _parseTypeN(type);\n\n    if (type.startsWith('bytes')) {\n\n        if(!size) {\n            throw new Error('bytes[] not yet supported in solidity');\n        }\n\n        // must be 32 byte slices when in an array\n        if(arraySize) {\n            size = 32;\n        }\n\n        if (size < 1 || size > 32 || size < value.replace(/^0x/i,'').length / 2 ) {\n            throw new Error('Invalid bytes' + size +' for '+ value);\n        }\n\n        return utils.rightPad(value, size * 2);\n    } else if (type.startsWith('uint')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid uint'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            throw new Error('Supplied uint '+ num.toString() +' is negative');\n        }\n\n        return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n    } else if (type.startsWith('int')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid int'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            return num.toTwos(size).toString('hex');\n        } else {\n            return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n        }\n\n    } else {\n        // FIXME: support all other types\n        throw new Error('Unsupported or invalid type: ' + type);\n    }\n};\n\n\nvar _processSoliditySha3Args = function (arg) {\n    /*jshint maxcomplexity:false */\n\n    if(_.isArray(arg)) {\n        throw new Error('Autodetection of array types is not supported.');\n    }\n\n    var type, value = '';\n    var hexArg, arraySize;\n\n    // if type is given\n    if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {\n        type = arg.hasOwnProperty('t') ? arg.t : arg.type;\n        value = arg.hasOwnProperty('v') ? arg.v : arg.value;\n\n    // otherwise try to guess the type\n    } else {\n\n        type = utils.toHex(arg, true);\n        value = utils.toHex(arg);\n\n        if (!type.startsWith('int') && !type.startsWith('uint')) {\n            type = 'bytes';\n        }\n    }\n\n    if ((type.startsWith('int') || type.startsWith('uint')) &&  typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n        value = new BN(value);\n    }\n\n    // get the array size\n    if(_.isArray(value)) {\n        arraySize = _parseTypeNArray(type);\n        if(arraySize && value.length !== arraySize) {\n            throw new Error(type +' is not matching the given array '+ JSON.stringify(value));\n        } else {\n            arraySize = value.length;\n        }\n    }\n\n\n    if (_.isArray(value)) {\n        hexArg = value.map(function (val) {\n            return _solidityPack(type, val, arraySize).toString('hex').replace('0x','');\n        });\n        return hexArg.join('');\n    } else {\n        hexArg = _solidityPack(type, value, arraySize);\n        return hexArg.toString('hex').replace('0x','');\n    }\n\n};\n\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */\nvar soliditySha3 = function () {\n    /*jshint maxcomplexity:false */\n\n    var args = Array.prototype.slice.call(arguments);\n\n    var hexArgs = _.map(args, _processSoliditySha3Args);\n\n    // console.log(args, hexArgs);\n    // console.log('0x'+ hexArgs.join(''));\n\n    return utils.sha3('0x'+ hexArgs.join(''));\n};\n\n\nmodule.exports = soliditySha3;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@frozeman.de>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar utils = require('web3-utils');\nvar BN = require('bn.js');\nvar SolidityParam = require('./param');\n\n\n\n/**\n * Formats input value to byte representation of int\n * If value is negative, return it's two's complement\n * If the value is floating point, round it down\n *\n * @method formatInputInt\n * @param {String|Number|BN} value that needs to be formatted\n * @returns {SolidityParam}\n */\nvar formatInputInt = function (value) {\n    if(_.isNumber(value)) {\n        value = Math.trunc(value);\n    }\n    return new SolidityParam(utils.toTwosComplement(value).replace('0x',''));\n};\n\n/**\n * Formats input bytes\n *\n * @method formatInputBytes\n * @param {String} value\n * @returns {SolidityParam}\n */\nvar formatInputBytes = function (value) {\n    if(!utils.isHexStrict(value)) {\n        throw new Error('Given parameter is not bytes: \"'+ value + '\"');\n    }\n\n    var result = value.replace(/^0x/i,'');\n\n    if(result.length % 2 !== 0) {\n        throw new Error('Given parameter bytes has an invalid length: \"'+ value + '\"');\n    }\n\n    if (result.length > 64) {\n        throw new Error('Given parameter bytes is too long: \"' + value + '\"');\n    }\n\n    var l = Math.floor((result.length + 63) / 64);\n    result = utils.padRight(result, l * 64);\n    return new SolidityParam(result);\n};\n\n/**\n * Formats input bytes\n *\n * @method formatDynamicInputBytes\n * @param {String} value\n * @returns {SolidityParam}\n */\nvar formatInputDynamicBytes = function (value) {\n    if(!utils.isHexStrict(value)) {\n        throw new Error('Given parameter is not bytes: \"'+ value + '\"');\n    }\n\n    var result = value.replace(/^0x/i,'');\n\n    if(result.length % 2 !== 0) {\n        throw new Error('Given parameter bytes has an invalid length: \"'+ value + '\"');\n    }\n\n    var length = result.length / 2;\n    var l = Math.floor((result.length + 63) / 64);\n    result = utils.padRight(result, l * 64);\n    return new SolidityParam(formatInputInt(length).value + result);\n};\n\n/**\n * Formats input value to byte representation of string\n *\n * @method formatInputString\n * @param {String}\n * @returns {SolidityParam}\n */\nvar formatInputString = function (value) {\n    if(!_.isString(value)) {\n        throw new Error('Given parameter is not a valid string: ' + value);\n    }\n\n    var result = utils.utf8ToHex(value).replace(/^0x/i,'');\n    var length = result.length / 2;\n    var l = Math.floor((result.length + 63) / 64);\n    result = utils.padRight(result, l * 64);\n    return new SolidityParam(formatInputInt(length).value + result);\n};\n\n/**\n * Formats input value to byte representation of bool\n *\n * @method formatInputBool\n * @param {Boolean}\n * @returns {SolidityParam}\n */\nvar formatInputBool = function (value) {\n    var result = '000000000000000000000000000000000000000000000000000000000000000' + (value ?  '1' : '0');\n    return new SolidityParam(result);\n};\n\n\n/**\n * Check if input value is negative\n *\n * @method signedIsNegative\n * @param {String} value is hex format\n * @returns {Boolean} true if it is negative, otherwise false\n */\nvar signedIsNegative = function (value) {\n    return (new BN(value.substr(0, 1), 16).toString(2).substr(0, 1)) === '1';\n};\n\n/**\n * Formats right-aligned output bytes to int\n *\n * @method formatOutputInt\n * @param {SolidityParam} param\n * @returns {BN} right-aligned output bytes formatted to big number\n */\nvar formatOutputInt = function (param) {\n    var value = param.staticPart();\n\n    if(!value && !param.rawValue) {\n        throw new Error('Couldn\\'t decode '+ name +' from ABI: 0x'+ param.rawValue);\n    }\n\n    // check if it's negative number\n    // it it is, return two's complement\n    if (signedIsNegative(value)) {\n        return new BN(value, 16).fromTwos(256).toString(10);\n    }\n    return new BN(value, 16).toString(10);\n};\n\n/**\n * Formats right-aligned output bytes to uint\n *\n * @method formatOutputUInt\n * @param {SolidityParam} param\n * @returns {BN} right-aligned output bytes formatted to uint\n */\nvar formatOutputUInt = function (param, name) {\n    var value = param.staticPart();\n\n    if(!value && !param.rawValue) {\n        throw new Error('Couldn\\'t decode '+ name +' from ABI: 0x'+ param.rawValue);\n    }\n\n    return new BN(value, 16).toString(10);\n};\n\n\n\n/**\n * Should be used to format output bool\n *\n * @method formatOutputBool\n * @param {SolidityParam} param\n * @param {String} name type name\n * @returns {Boolean} right-aligned input bytes formatted to bool\n */\nvar formatOutputBool = function (param, name) {\n    var value = param.staticPart();\n\n    if(!value && !param.rawValue) {\n        throw new Error('Couldn\\'t decode '+ name +' from ABI: 0x'+ param.rawValue);\n    }\n\n    return (value === '0000000000000000000000000000000000000000000000000000000000000001');\n};\n\n/**\n * Should be used to format output bytes\n *\n * @method formatOutputBytes\n * @param {SolidityParam} param left-aligned hex representation of string\n * @param {String} name type name\n * @returns {String} hex string\n */\nvar formatOutputBytes = function (param, name) {\n    var matches = name.match(/^bytes([0-9]*)/);\n    var size = parseInt(matches[1]);\n\n    if(param.staticPart().slice(0, 2 * size).length !== size * 2) {\n        throw new Error('Couldn\\'t decode '+ name +' from ABI: 0x'+ param.rawValue + ' The size doesn\\'t match.');\n    }\n\n    return '0x' + param.staticPart().slice(0, 2 * size);\n};\n\n/**\n * Should be used to format output bytes\n *\n * @method formatOutputDynamicBytes\n * @param {SolidityParam} param left-aligned hex representation of string\n * @param {String} name type name\n * @returns {String} hex string\n */\nvar formatOutputDynamicBytes = function (param, name) {\n    var hex = param.dynamicPart().slice(0, 64);\n\n    if (!hex) {\n        throw new Error('Couldn\\'t decode '+ name +' from ABI: 0x'+ param.rawValue);\n    }\n\n    var length = (new BN(hex, 16)).toNumber() * 2;\n    return '0x' + param.dynamicPart().substr(64, length);\n};\n\n/**\n * Should be used to format output string\n *\n * @method formatOutputString\n * @param {SolidityParam} left-aligned hex representation of string\n * @returns {String} ascii string\n */\nvar formatOutputString = function (param) {\n    var hex = param.dynamicPart().slice(0, 64);\n\n    if(!hex) {\n        throw new Error('ERROR: The returned value is not a convertible string:'+ hex);\n    }\n\n    var length = (new BN(hex, 16)).toNumber() * 2;\n    return length ? utils.hexToUtf8('0x'+ param.dynamicPart().substr(64, length).replace(/^0x/i, '')) : '';\n};\n\n/**\n * Should be used to format output address\n *\n * @method formatOutputAddress\n * @param {SolidityParam} param right-aligned input bytes\n * @param {String} name type name\n * @returns {String} address\n */\nvar formatOutputAddress = function (param, name) {\n    var value = param.staticPart();\n\n    if (!value) {\n        throw new Error('Couldn\\'t decode '+ name +' from ABI: 0x'+ param.rawValue);\n    }\n\n    return utils.toChecksumAddress(\"0x\" + value.slice(value.length - 40, value.length));\n};\n\nmodule.exports = {\n    formatInputInt: formatInputInt,\n    formatInputBytes: formatInputBytes,\n    formatInputDynamicBytes: formatInputDynamicBytes,\n    formatInputString: formatInputString,\n    formatInputBool: formatInputBool,\n    formatOutputInt: formatOutputInt,\n    formatOutputUInt: formatOutputUInt,\n    formatOutputBool: formatOutputBool,\n    formatOutputBytes: formatOutputBytes,\n    formatOutputDynamicBytes: formatOutputDynamicBytes,\n    formatOutputString: formatOutputString,\n    formatOutputAddress: formatOutputAddress,\n    toTwosComplement: utils.toTwosComplement\n};\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\nvar utf8 = require('utf8');\nvar Hash = require(\"eth-lib/lib/hash\");\n\n\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBN = function (object) {\n    return object instanceof BN ||\n        (object && object.constructor && object.constructor.name === 'BN');\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n    return object && object.constructor && object.constructor.name === 'BigNumber';\n};\n\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */\nvar toBN = function(number){\n    try {\n        return numberToBN.apply(null, arguments);\n    } catch(e) {\n        throw new Error(e + ' Given value: \"'+ number +'\"');\n    }\n};\n\n\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */\nvar toTwosComplement = function (number) {\n    return '0x'+ toBN(number).toTwos(256).toString(16, 64);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar isAddress = function (address) {\n    // check if it has the basic requirements of an address\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        return false;\n        // If it's ALL lowercase or ALL upppercase\n    } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n        return true;\n        // Otherwise check each case\n    } else {\n        return checkAddressChecksum(address);\n    }\n};\n\n\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar checkAddressChecksum = function (address) {\n    // Check each case\n    address = address.replace(/^0x/i,'');\n    var addressHash = sha3(address.toLowerCase()).replace(/^0x/i,'');\n\n    for (var i = 0; i < 40; i++ ) {\n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar leftPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar rightPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : \"0\"));\n};\n\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar utf8ToHex = function(str) {\n    str = utf8.encode(str);\n    var hex = \"\";\n\n    // remove \\u0000 padding from either side\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        // if (code !== 0) {\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n        // }\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToUtf8 = function(hex) {\n    if (!isHexStrict(hex))\n        throw new Error('The parameter \"'+ hex +'\" must be a valid HEX string.');\n\n    var str = \"\";\n    var code = 0;\n    hex = hex.replace(/^0x/i,'');\n\n    // remove 00 padding from either side\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n\n    var l = hex.length;\n\n    for (var i=0; i < l; i+=2) {\n        code = parseInt(hex.substr(i, 2), 16);\n        // if (code !== 0) {\n        str += String.fromCharCode(code);\n        // }\n    }\n\n    return utf8.decode(str);\n};\n\n\n/**\n * Converts value to it's number representation\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumber = function (value) {\n    if (!value) {\n        return value;\n    }\n\n    return toBN(value).toNumber();\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumberString = function (value) {\n    if (!value) return value;\n\n    return toBN(value).toString(10);\n};\n\n\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar numberToHex = function (value) {\n    if (_.isNull(value) || _.isUndefined(value)) {\n        return value;\n    }\n\n    if (!isFinite(value) && !isHexStrict(value)) {\n        throw new Error('Given input \"'+value+'\" is not a number.');\n    }\n\n    var number = toBN(value);\n    var result = number.toString(16);\n\n    return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */\nvar bytesToHex = function(bytes) {\n    for (var hex = [], i = 0; i < bytes.length; i++) {\n        /* jshint ignore:start */\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n        /* jshint ignore:end */\n    }\n    return '0x'+ hex.join(\"\");\n};\n\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */\nvar hexToBytes = function(hex) {\n    hex = hex.toString(16);\n\n    if (!isHexStrict(hex)) {\n        throw new Error('Given value \"'+ hex +'\" is not a valid hex string.');\n    }\n\n    hex = hex.replace(/^0x/i,'');\n\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    return bytes;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object} value\n * @param {Boolean} returnType\n * @return {String}\n */\nvar toHex = function (value, returnType) {\n    /*jshint maxcomplexity: false */\n\n    if (isAddress(value)) {\n        return returnType ? 'address' : '0x'+ value.toLowerCase().replace(/^0x/i,'');\n    }\n\n    if (_.isBoolean(value)) {\n        return returnType ? 'bool' : value ? '0x01' : '0x00';\n    }\n\n\n    if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {\n        return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n    }\n\n    // if its a negative number, pass it through numberToHex\n    if (_.isString(value)) {\n        if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n            return returnType ? 'int256' : numberToHex(value);\n        } else if(value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n            return returnType ? 'bytes' : value;\n        } else if (!isFinite(value)) {\n            return returnType ? 'string' : utf8ToHex(value);\n        }\n    }\n\n    return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\n};\n\n\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHexStrict = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));\n};\n\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHex = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));\n};\n\n\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * TODO UNDOCUMENTED\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Returns true if given string is a valid log topic.\n *\n * TODO UNDOCUMENTED\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n        return true;\n    }\n    return false;\n};\n\n\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nvar sha3 = function (value) {\n    if (isHexStrict(value) && /^0x/i.test((value).toString())) {\n        value = hexToBytes(value);\n    }\n\n    var returnValue = Hash.keccak256(value); // jshint ignore:line\n\n    if(returnValue === SHA3_NULL_S) {\n        return null;\n    } else {\n        return returnValue;\n    }\n};\n// expose the under the hood keccak256\nsha3._Hash = Hash;\n\n\nmodule.exports = {\n    BN: BN,\n    isBN: isBN,\n    isBigNumber: isBigNumber,\n    toBN: toBN,\n    isAddress: isAddress,\n    isBloom: isBloom, // TODO UNDOCUMENTED\n    isTopic: isTopic, // TODO UNDOCUMENTED\n    checkAddressChecksum: checkAddressChecksum,\n    utf8ToHex: utf8ToHex,\n    hexToUtf8: hexToUtf8,\n    hexToNumber: hexToNumber,\n    hexToNumberString: hexToNumberString,\n    numberToHex: numberToHex,\n    toHex: toHex,\n    hexToBytes: hexToBytes,\n    bytesToHex: bytesToHex,\n    isHex: isHex,\n    isHexStrict: isHexStrict,\n    leftPad: leftPad,\n    rightPad: rightPad,\n    toTwosComplement: toTwosComplement,\n    sha3: sha3\n};\n","// the whatwg-fetch polyfill installs the fetch() function\n// on the global object (window or self)\n//\n// Return that as the export for use in Webpack, Browserify etc.\nrequire('whatwg-fetch');\nmodule.exports = self.fetch.bind(self);\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file errors.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\nmodule.exports = {\n    ErrorResponse: function (result) {\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);\n        return new Error('Returned error: ' + message);\n    },\n    InvalidNumberOfParams: function (got, expected, method) {\n        return new Error('Invalid number of parameters for \"'+ method +'\". Got '+ got +' expected '+ expected +'!');\n    },\n    InvalidConnection: function (host){\n        return new Error('CONNECTION ERROR: Couldn\\'t connect to node '+ host +'.');\n    },\n    InvalidProvider: function () {\n        return new Error('Provider not set or invalid');\n    },\n    InvalidResponse: function (result){\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);\n        return new Error(message);\n    },\n    ConnectionTimeout: function (ms){\n        return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');\n    }\n};\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file param.js\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2015\n */\n\nvar formatters = require('./formatters.js');\n\n/**\n * SolidityParam object prototype.\n * Should be used when encoding, decoding solidity bytes\n */\nvar SolidityParam = function (value, offset, rawValue) {\n    this.value = value || '';\n    this.offset = offset; // offset in bytes\n    this.rawValue = rawValue; // used for debugging\n};\n\n/**\n * This method should be used to get length of params's dynamic part\n *\n * @method dynamicPartLength\n * @returns {Number} length of dynamic part (in bytes)\n */\nSolidityParam.prototype.dynamicPartLength = function () {\n    return this.dynamicPart().length / 2;\n};\n\n/**\n * This method should be used to create copy of solidity param with different offset\n *\n * @method withOffset\n * @param {Number} offset length in bytes\n * @returns {SolidityParam} new solidity param with applied offset\n */\nSolidityParam.prototype.withOffset = function (offset) {\n    return new SolidityParam(this.value, offset);\n};\n\n/**\n * This method should be used to combine solidity params together\n * eg. when appending an array\n *\n * @method combine\n * @param {SolidityParam} param with which we should combine\n * @param {SolidityParam} result of combination\n */\nSolidityParam.prototype.combine = function (param) {\n    return new SolidityParam(this.value + param.value);\n};\n\n/**\n * This method should be called to check if param has dynamic size.\n * If it has, it returns true, otherwise false\n *\n * @method isDynamic\n * @returns {Boolean}\n */\nSolidityParam.prototype.isDynamic = function () {\n    return this.offset !== undefined;\n};\n\n/**\n * This method should be called to transform offset to bytes\n *\n * @method offsetAsBytes\n * @returns {String} bytes representation of offset\n */\nSolidityParam.prototype.offsetAsBytes = function () {\n    return !this.isDynamic() ? '' : formatters.toTwosComplement(this.offset).replace('0x','');\n};\n\n/**\n * This method should be called to get static part of param\n *\n * @method staticPart\n * @returns {String} offset if it is a dynamic param, otherwise value\n */\nSolidityParam.prototype.staticPart = function () {\n    if (!this.isDynamic()) {\n        return this.value;\n    }\n    return this.offsetAsBytes();\n};\n\n/**\n * This method should be called to get dynamic part of param\n *\n * @method dynamicPart\n * @returns {String} returns a value if it is a dynamic param, otherwise empty string\n */\nSolidityParam.prototype.dynamicPart = function () {\n    return this.isDynamic() ? this.value : '';\n};\n\n/**\n * This method should be called to encode param\n *\n * @method encode\n * @returns {String}\n */\nSolidityParam.prototype.encode = function () {\n    return this.staticPart() + this.dynamicPart();\n};\n\n/**\n * This method should be called to encode array of params\n *\n * @method encodeList\n * @param {Array[SolidityParam]} params\n * @returns {String}\n */\nSolidityParam.encodeList = function (params) {\n\n    // updating offsets\n    var totalOffset = params.length * 32;\n    var offsetParams = params.map(function (param) {\n        if (!param.isDynamic()) {\n            return param;\n        }\n        var offset = totalOffset;\n        totalOffset += param.dynamicPartLength();\n        return param.withOffset(offset);\n    });\n\n    // encode everything!\n    return offsetParams.reduce(function (result, param) {\n        return result + param.dynamicPart();\n    }, offsetParams.reduce(function (result, param) {\n        return result + param.staticPart();\n    }, ''));\n};\n\n\n\nmodule.exports = SolidityParam;\n\n","var f = require('../formatters');\nvar SolidityType = require('../type');\n\n/**\n * SolidityTypeBytes is a prototype that represents the bytes type.\n * It matches:\n * bytes\n * bytes[]\n * bytes[4]\n * bytes[][]\n * bytes[3][]\n * bytes[][6][], ...\n * bytes32\n * bytes8[4]\n * bytes[3][]\n */\nvar SolidityTypeBytes = function () {\n    this._inputFormatter = f.formatInputBytes;\n    this._outputFormatter = f.formatOutputBytes;\n};\n\nSolidityTypeBytes.prototype = new SolidityType({});\nSolidityTypeBytes.prototype.constructor = SolidityTypeBytes;\n\nSolidityTypeBytes.prototype.isType = function (name) {\n    return !!name.match(/^bytes([0-9]{1,})(\\[([0-9]*)\\])*$/);\n};\n\nmodule.exports = SolidityTypeBytes;\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buf' + 'fer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","var f = require('../formatters');\nvar SolidityType = require('../type');\n\n/**\n * SolidityTypeUInt is a protoype that represents uint type\n * It matches:\n * uint\n * uint[]\n * uint[4]\n * uint[][]\n * uint[3][]\n * uint[][6][], ...\n * uint32\n * uint64[]\n * uint8[4]\n * uint256[][]\n * uint[3][]\n * uint64[][6][], ...\n */\nvar SolidityTypeUInt = function () {\n    this._inputFormatter = f.formatInputInt;\n    this._outputFormatter = f.formatOutputUInt;\n};\n\nSolidityTypeUInt.prototype = new SolidityType({});\nSolidityTypeUInt.prototype.constructor = SolidityTypeUInt;\n\nSolidityTypeUInt.prototype.isType = function (name) {\n    return !!name.match(/^uint([0-9]*)?(\\[([0-9]*)\\])*$/);\n};\n\nmodule.exports = SolidityTypeUInt;\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar utils = require('./utils.js');\n\n\nvar _elementaryName = function (name) {\n    /*jshint maxcomplexity:false */\n\n    if (name.startsWith('int[')) {\n        return 'int256' + name.slice(3);\n    } else if (name === 'int') {\n        return 'int256';\n    } else if (name.startsWith('uint[')) {\n        return 'uint256' + name.slice(4);\n    } else if (name === 'uint') {\n        return 'uint256';\n    } else if (name.startsWith('fixed[')) {\n        return 'fixed128x128' + name.slice(5);\n    } else if (name === 'fixed') {\n        return 'fixed128x128';\n    } else if (name.startsWith('ufixed[')) {\n        return 'ufixed128x128' + name.slice(6);\n    } else if (name === 'ufixed') {\n        return 'ufixed128x128';\n    }\n    return name;\n};\n\n// Parse N from type<N>\nvar _parseTypeN = function (type) {\n    var typesize = /^\\D+(\\d+).*$/.exec(type);\n    return typesize ? parseInt(typesize[1], 10) : null;\n};\n\n// Parse N from type[<N>]\nvar _parseTypeNArray = function (type) {\n    var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n    return arraySize ? parseInt(arraySize[1], 10) : null;\n};\n\nvar _parseNumber = function (arg) {\n    var type = typeof arg;\n    if (type === 'string') {\n        if (utils.isHexStrict(arg)) {\n            return new BN(arg.replace(/0x/i,''), 16);\n        } else {\n            return new BN(arg, 10);\n        }\n    } else if (type === 'number') {\n        return new BN(arg);\n    } else if (utils.isBigNumber(arg)) {\n        return new BN(arg.toString(10));\n    } else if (utils.isBN(arg)) {\n        return arg;\n    } else {\n        throw new Error(arg +' is not a number');\n    }\n};\n\nvar _solidityPack = function (type, value, arraySize) {\n    /*jshint maxcomplexity:false */\n\n    var size, num;\n    type = _elementaryName(type);\n\n\n    if (type === 'bytes') {\n\n        if (value.replace(/^0x/i,'').length % 2 !== 0) {\n            throw new Error('Invalid bytes characters '+ value.length);\n        }\n\n        return value;\n    } else if (type === 'string') {\n        return utils.utf8ToHex(value);\n    } else if (type === 'bool') {\n        return value ? '01' : '00';\n    } else if (type.startsWith('address')) {\n        if(arraySize) {\n            size = 64;\n        } else {\n            size = 40;\n        }\n\n        if(!utils.isAddress(value)) {\n            throw new Error(value +' is not a valid address, or the checksum is invalid.');\n        }\n\n        return utils.leftPad(value.toLowerCase(), size);\n    }\n\n    size = _parseTypeN(type);\n\n    if (type.startsWith('bytes')) {\n\n        if(!size) {\n            throw new Error('bytes[] not yet supported in solidity');\n        }\n\n        // must be 32 byte slices when in an array\n        if(arraySize) {\n            size = 32;\n        }\n\n        if (size < 1 || size > 32 || size < value.replace(/^0x/i,'').length / 2 ) {\n            throw new Error('Invalid bytes' + size +' for '+ value);\n        }\n\n        return utils.rightPad(value, size * 2);\n    } else if (type.startsWith('uint')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid uint'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            throw new Error('Supplied uint '+ num.toString() +' is negative');\n        }\n\n        return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n    } else if (type.startsWith('int')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid int'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            return num.toTwos(size).toString('hex');\n        } else {\n            return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n        }\n\n    } else {\n        // FIXME: support all other types\n        throw new Error('Unsupported or invalid type: ' + type);\n    }\n};\n\n\nvar _processSoliditySha3Args = function (arg) {\n    /*jshint maxcomplexity:false */\n\n    if(_.isArray(arg)) {\n        throw new Error('Autodetection of array types is not supported.');\n    }\n\n    var type, value = '';\n    var hexArg, arraySize;\n\n    // if type is given\n    if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {\n        type = arg.hasOwnProperty('t') ? arg.t : arg.type;\n        value = arg.hasOwnProperty('v') ? arg.v : arg.value;\n\n    // otherwise try to guess the type\n    } else {\n\n        type = utils.toHex(arg, true);\n        value = utils.toHex(arg);\n\n        if (!type.startsWith('int') && !type.startsWith('uint')) {\n            type = 'bytes';\n        }\n    }\n\n    if ((type.startsWith('int') || type.startsWith('uint')) &&  typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n        value = new BN(value);\n    }\n\n    // get the array size\n    if(_.isArray(value)) {\n        arraySize = _parseTypeNArray(type);\n        if(arraySize && value.length !== arraySize) {\n            throw new Error(type +' is not matching the given array '+ JSON.stringify(value));\n        } else {\n            arraySize = value.length;\n        }\n    }\n\n\n    if (_.isArray(value)) {\n        hexArg = value.map(function (val) {\n            return _solidityPack(type, val, arraySize).toString('hex').replace('0x','');\n        });\n        return hexArg.join('');\n    } else {\n        hexArg = _solidityPack(type, value, arraySize);\n        return hexArg.toString('hex').replace('0x','');\n    }\n\n};\n\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */\nvar soliditySha3 = function () {\n    /*jshint maxcomplexity:false */\n\n    var args = Array.prototype.slice.call(arguments);\n\n    var hexArgs = _.map(args, _processSoliditySha3Args);\n\n    // console.log(args, hexArgs);\n    // console.log('0x'+ hexArgs.join(''));\n\n    return utils.sha3('0x'+ hexArgs.join(''));\n};\n\n\nmodule.exports = soliditySha3;\n","var f = require('../formatters');\nvar formatters = require('web3-core-helpers').formatters;\nvar SolidityType = require('../type');\n\n/**\n * SolidityTypeAddress is a protoype that represents address type\n * It matches:\n * address\n * address[]\n * address[4]\n * address[][]\n * address[3][]\n * address[][6][], ...\n */\nvar SolidityTypeAddress = function () {\n    this._inputFormatter = function(){\n        var args = Array.prototype.slice.call(arguments);\n        args[0] = (!args[0] || args[0] === '0x0') ? '' : formatters.inputAddressFormatter(args[0]);\n        return f.formatInputInt.apply(this, args);\n    };\n    this._outputFormatter = f.formatOutputAddress;\n};\n\nSolidityTypeAddress.prototype = new SolidityType({});\nSolidityTypeAddress.prototype.constructor = SolidityTypeAddress;\n\nSolidityTypeAddress.prototype.isType = function (name) {\n    return !!name.match(/address(\\[([0-9]*)\\])?/);\n};\n\nmodule.exports = SolidityTypeAddress;\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file index.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@frozeman.de>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar utils = require('web3-utils');\n\nvar f = require('./formatters');\n\nvar SolidityTypeAddress = require('./types/address');\nvar SolidityTypeBool = require('./types/bool');\nvar SolidityTypeInt = require('./types/int');\nvar SolidityTypeUInt = require('./types/uint');\nvar SolidityTypeDynamicBytes = require('./types/dynamicbytes');\nvar SolidityTypeString = require('./types/string');\nvar SolidityTypeBytes = require('./types/bytes');\n\nvar isDynamic = function (solidityType, type) {\n    return solidityType.isDynamicType(type) ||\n        solidityType.isDynamicArray(type);\n};\n\n\n// result method\nfunction Result() {}\n\n\n/**\n * ABICoder prototype should be used to encode/decode solidity params of any type\n */\nvar ABICoder = function (types) {\n    this._types = types;\n};\n\n/**\n * This method should be used to transform type to SolidityType\n *\n * @method _requireType\n * @param {String} type\n * @returns {SolidityType}\n * @throws {Error} throws if no matching type is found\n */\nABICoder.prototype._requireType = function (type) {\n    var solidityType = this._types.filter(function (t) {\n        return t.isType(type);\n    })[0];\n\n    if (!solidityType) {\n        throw Error('Invalid solidity type: ' + type);\n    }\n\n    return solidityType;\n};\n\n\n\nABICoder.prototype._getOffsets = function (types, solidityTypes) {\n    var lengths =  solidityTypes.map(function (solidityType, index) {\n        return solidityType.staticPartLength(types[index]);\n    });\n\n    for (var i = 1; i < lengths.length; i++) {\n        // sum with length of previous element\n        lengths[i] += lengths[i - 1];\n    }\n\n    return lengths.map(function (length, index) {\n        // remove the current length, so the length is sum of previous elements\n        var staticPartLength = solidityTypes[index].staticPartLength(types[index]);\n        return length - staticPartLength;\n    });\n};\n\nABICoder.prototype._getSolidityTypes = function (types) {\n    var self = this;\n    return types.map(function (type) {\n        return self._requireType(type);\n    });\n};\n\n\nABICoder.prototype._encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {\n    var result = \"\";\n    var self = this;\n\n    types.forEach(function (type, i) {\n        if (isDynamic(solidityTypes[i], types[i])) {\n            result += f.formatInputInt(dynamicOffset).encode();\n            var e = self._encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n            dynamicOffset += e.length / 2;\n        } else {\n            // don't add length to dynamicOffset. it's already counted\n            result += self._encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n        }\n\n        // TODO: figure out nested arrays\n    });\n\n    types.forEach(function (type, i) {\n        if (isDynamic(solidityTypes[i], types[i])) {\n            var e = self._encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n            dynamicOffset += e.length / 2;\n            result += e;\n        }\n    });\n    return result;\n};\n\n// TODO: refactor whole encoding!\nABICoder.prototype._encodeWithOffset = function (type, solidityType, encoded, offset) {\n    var self = this;\n    if (solidityType.isDynamicArray(type)) {\n        return (function () {\n            // offset was already set\n            var nestedName = solidityType.nestedName(type);\n            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);\n            var result = encoded[0];\n\n            (function () {\n                var previousLength = 2; // in int\n                if (solidityType.isDynamicArray(nestedName)) {\n                    for (var i = 1; i < encoded.length; i++) {\n                        previousLength += +(encoded[i - 1])[0] || 0;\n                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();\n                    }\n                }\n            })();\n\n            // first element is length, skip it\n            (function () {\n                for (var i = 0; i < encoded.length - 1; i++) {\n                    var additionalOffset = result / 2;\n                    result += self._encodeWithOffset(nestedName, solidityType, encoded[i + 1], offset +  additionalOffset);\n                }\n            })();\n\n            return result;\n        })();\n\n    } else if (solidityType.isStaticArray(type)) {\n        return (function () {\n            var nestedName = solidityType.nestedName(type);\n            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);\n            var result = \"\";\n\n\n            if (solidityType.isDynamicArray(nestedName)) {\n                (function () {\n                    var previousLength = 0; // in int\n                    for (var i = 0; i < encoded.length; i++) {\n                        // calculate length of previous item\n                        previousLength += +(encoded[i - 1] || [])[0] || 0;\n                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();\n                    }\n                })();\n            }\n\n            (function () {\n                for (var i = 0; i < encoded.length; i++) {\n                    var additionalOffset = result / 2;\n                    result += self._encodeWithOffset(nestedName, solidityType, encoded[i], offset + additionalOffset);\n                }\n            })();\n\n            return result;\n        })();\n    }\n\n    return encoded;\n};\n\n\n/**\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n *\n * @method encodeFunctionSignature\n * @param {String|Object} functionName\n * @return {String} encoded function name\n */\nABICoder.prototype.encodeFunctionSignature = function (functionName) {\n    if(_.isObject(functionName)) {\n        functionName = utils._jsonInterfaceMethodToString(functionName);\n    }\n\n    return utils.sha3(functionName).slice(0, 10);\n};\n\n\n/**\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n *\n * @method encodeEventSignature\n * @param {String|Object} functionName\n * @return {String} encoded function name\n */\nABICoder.prototype.encodeEventSignature = function (functionName) {\n    if(_.isObject(functionName)) {\n        functionName = utils._jsonInterfaceMethodToString(functionName);\n    }\n\n    return utils.sha3(functionName);\n};\n\n\n/**\n * Should be used to encode plain param\n *\n * @method encodeParameter\n * @param {String} type\n * @param {Object} param\n * @return {String} encoded plain param\n */\nABICoder.prototype.encodeParameter = function (type, param) {\n    return this.encodeParameters([type], [param]);\n};\n\n/**\n * Should be used to encode list of params\n *\n * @method encodeParameters\n * @param {Array} types\n * @param {Array} params\n * @return {String} encoded list of params\n */\nABICoder.prototype.encodeParameters = function (types, params) {\n    // given a json interface\n    if(_.isObject(types) && types.inputs) {\n        types = _.map(types.inputs, function (input) {\n            return input.type;\n        });\n    }\n\n    var solidityTypes = this._getSolidityTypes(types);\n\n    var encodeds = solidityTypes.map(function (solidityType, index) {\n        return solidityType.encode(params[index], types[index]);\n    });\n\n    var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {\n        var staticPartLength = solidityType.staticPartLength(types[index]);\n        var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;\n\n        return acc + (isDynamic(solidityTypes[index], types[index]) ?\n                32 :\n                roundedStaticPartLength);\n    }, 0);\n\n    return '0x'+ this._encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);\n};\n\n\n/**\n * Encodes a function call from its json interface and parameters.\n *\n * @method encodeFunctionCall\n * @param {Array} jsonInterface\n * @param {Array} params\n * @return {String} The encoded ABI for this function call\n */\nABICoder.prototype.encodeFunctionCall = function (jsonInterface, params) {\n    return this.encodeFunctionSignature(jsonInterface) + this.encodeParameters(jsonInterface, params).replace('0x','');\n};\n\n\n/**\n * Should be used to decode bytes to plain param\n *\n * @method decodeParameter\n * @param {String} type\n * @param {String} bytes\n * @return {Object} plain param\n */\nABICoder.prototype.decodeParameter = function (type, bytes) {\n\n    if (!_.isString(type)) {\n        throw new Error('Given parameter type is not a string: '+ type);\n    }\n\n    return this.decodeParameters([{type: type}], bytes)[0];\n};\n\n/**\n * Should be used to decode list of params\n *\n * @method decodeParameter\n * @param {Array} outputs\n * @param {String} bytes\n * @return {Array} array of plain params\n */\nABICoder.prototype.decodeParameters = function (outputs, bytes) {\n    var isTypeArray = _.isArray(outputs) && _.isString(outputs[0]);\n    var types = (isTypeArray) ? outputs : [];\n\n    if(!isTypeArray) {\n        outputs.forEach(function (output) {\n            types.push(output.type);\n        });\n    }\n\n    var solidityTypes = this._getSolidityTypes(types);\n    var offsets = this._getOffsets(types, solidityTypes);\n\n    var returnValue = new Result();\n    returnValue.__length__ = 0;\n    var count = 0;\n\n    outputs.forEach(function (output, i) {\n        var decodedValue = solidityTypes[count].decode(bytes.replace(/^0x/i,''), offsets[count],  types[count], count);\n        decodedValue = (decodedValue === '0x') ? null : decodedValue;\n\n        returnValue[i] = decodedValue;\n\n        if (_.isObject(output) && output.name) {\n            returnValue[output.name] = decodedValue;\n        }\n\n        returnValue.__length__++;\n        count++;\n    });\n\n    return returnValue;\n};\n\n/**\n * Decodes events non- and indexed parameters.\n *\n * @method decodeLog\n * @param {Object} inputs\n * @param {String} data\n * * @param {Array} topics\n * @return {Array} array of plain params\n */\nABICoder.prototype.decodeLog = function (inputs, data, topics) {\n\n    data = data || '';\n\n    var notIndexedInputs = [];\n    var indexedInputs = [];\n\n    inputs.forEach(function (input, i) {\n        if (input.indexed) {\n            indexedInputs[i] = input;\n        } else {\n            notIndexedInputs[i] = input;\n        }\n    });\n\n    var nonIndexedData = data.slice(2);\n    var indexedData = _.isArray(topics) ? topics.map(function (topic) { return topic.slice(2); }).join('') : topics;\n\n    var notIndexedParams = this.decodeParameters(notIndexedInputs, nonIndexedData);\n    var indexedParams = this.decodeParameters(indexedInputs, indexedData);\n\n\n    var returnValue = new Result();\n    returnValue.__length__ = 0;\n\n    inputs.forEach(function (res, i) {\n        returnValue[i] = (res.type === 'string') ? '' : null;\n\n        if (notIndexedParams[i]) {\n            returnValue[i] = notIndexedParams[i];\n        }\n        if (indexedParams[i]) {\n            returnValue[i] = indexedParams[i];\n        }\n\n        if(res.name) {\n            returnValue[res.name] = returnValue[i];\n        }\n\n        returnValue.__length__++;\n    });\n\n    return returnValue;\n};\n\n\nvar coder = new ABICoder([\n    new SolidityTypeAddress(),\n    new SolidityTypeBool(),\n    new SolidityTypeInt(),\n    new SolidityTypeUInt(),\n    new SolidityTypeDynamicBytes(),\n    new SolidityTypeBytes(),\n    new SolidityTypeString()\n]);\n\nmodule.exports = coder;\n","var f = require('../formatters');\nvar SolidityType = require('../type');\n\n/**\n * SolidityTypeInt is a protoype that represents int type\n * It matches:\n * int\n * int[]\n * int[4]\n * int[][]\n * int[3][]\n * int[][6][], ...\n * int32\n * int64[]\n * int8[4]\n * int256[][]\n * int[3][]\n * int64[][6][], ...\n */\nvar SolidityTypeInt = function () {\n    this._inputFormatter = f.formatInputInt;\n    this._outputFormatter = f.formatOutputInt;\n};\n\nSolidityTypeInt.prototype = new SolidityType({});\nSolidityTypeInt.prototype.constructor = SolidityTypeInt;\n\nSolidityTypeInt.prototype.isType = function (name) {\n    return !!name.match(/^int([0-9]*)?(\\[([0-9]*)\\])*$/);\n};\n\nmodule.exports = SolidityTypeInt;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file iban.js\n *\n * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol\n *\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2015\n */\n\n\"use strict\";\n\nvar utils = require('web3-utils');\nvar BigNumber = require('bn.js');\n\n\nvar leftPad = function (string, bytes) {\n    var result = string;\n    while (result.length < bytes * 2) {\n        result = '0' + result;\n    }\n    return result;\n};\n\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n * @method iso13616Prepare\n * @param {String} iban the IBAN\n * @returns {String} the prepared IBAN\n */\nvar iso13616Prepare = function (iban) {\n    var A = 'A'.charCodeAt(0);\n    var Z = 'Z'.charCodeAt(0);\n\n    iban = iban.toUpperCase();\n    iban = iban.substr(4) + iban.substr(0,4);\n\n    return iban.split('').map(function(n){\n        var code = n.charCodeAt(0);\n        if (code >= A && code <= Z){\n            // A = 10, B = 11, ... Z = 35\n            return code - A + 10;\n        } else {\n            return n;\n        }\n    }).join('');\n};\n\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @method mod9710\n * @param {String} iban\n * @returns {Number}\n */\nvar mod9710 = function (iban) {\n    var remainder = iban,\n        block;\n\n    while (remainder.length > 2){\n        block = remainder.slice(0, 9);\n        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n    }\n\n    return parseInt(remainder, 10) % 97;\n};\n\n/**\n * This prototype should be used to create iban object from iban correct string\n *\n * @param {String} iban\n */\nvar Iban = function Iban(iban) {\n    this._iban = iban;\n};\n\n/**\n * This method should be used to create an ethereum address from a direct iban address\n *\n * @method toAddress\n * @param {String} iban address\n * @return {String} the ethereum address\n */\nIban.toAddress = function (ib) {\n    ib = new Iban(ib);\n\n    if(!ib.isDirect()) {\n        throw new Error('IBAN is indirect and can\\'t be converted');\n    }\n\n    return ib.toAddress();\n};\n\n/**\n * This method should be used to create iban address from an ethereum address\n *\n * @method toIban\n * @param {String} address\n * @return {String} the IBAN address\n */\nIban.toIban = function (address) {\n    return Iban.fromAddress(address).toString();\n};\n\n/**\n * This method should be used to create iban object from an ethereum address\n *\n * @method fromAddress\n * @param {String} address\n * @return {Iban} the IBAN object\n */\nIban.fromAddress = function (address) {\n    if(!utils.isAddress(address)){\n        throw new Error('Provided address is not a valid address: '+ address);\n    }\n\n    address = address.replace('0x','').replace('0X','');\n\n    var asBn = new BigNumber(address, 16);\n    var base36 = asBn.toString(36);\n    var padded = leftPad(base36, 15);\n    return Iban.fromBban(padded.toUpperCase());\n};\n\n/**\n * Convert the passed BBAN to an IBAN for this country specification.\n * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n *\n * @method fromBban\n * @param {String} bban the BBAN to convert to IBAN\n * @returns {Iban} the IBAN object\n */\nIban.fromBban = function (bban) {\n    var countryCode = 'XE';\n\n    var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));\n    var checkDigit = ('0' + (98 - remainder)).slice(-2);\n\n    return new Iban(countryCode + checkDigit + bban);\n};\n\n/**\n * Should be used to create IBAN object for given institution and identifier\n *\n * @method createIndirect\n * @param {Object} options, required options are \"institution\" and \"identifier\"\n * @return {Iban} the IBAN object\n */\nIban.createIndirect = function (options) {\n    return Iban.fromBban('ETH' + options.institution + options.identifier);\n};\n\n/**\n * This method should be used to check if given string is valid iban object\n *\n * @method isValid\n * @param {String} iban string\n * @return {Boolean} true if it is valid IBAN\n */\nIban.isValid = function (iban) {\n    var i = new Iban(iban);\n    return i.isValid();\n};\n\n/**\n * Should be called to check if iban is correct\n *\n * @method isValid\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isValid = function () {\n    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&\n        mod9710(iso13616Prepare(this._iban)) === 1;\n};\n\n/**\n * Should be called to check if iban number is direct\n *\n * @method isDirect\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isDirect = function () {\n    return this._iban.length === 34 || this._iban.length === 35;\n};\n\n/**\n * Should be called to check if iban number if indirect\n *\n * @method isIndirect\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isIndirect = function () {\n    return this._iban.length === 20;\n};\n\n/**\n * Should be called to get iban checksum\n * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\n *\n * @method checksum\n * @returns {String} checksum\n */\nIban.prototype.checksum = function () {\n    return this._iban.substr(2, 2);\n};\n\n/**\n * Should be called to get institution identifier\n * eg. XREG\n *\n * @method institution\n * @returns {String} institution identifier\n */\nIban.prototype.institution = function () {\n    return this.isIndirect() ? this._iban.substr(7, 4) : '';\n};\n\n/**\n * Should be called to get client identifier within institution\n * eg. GAVOFYORK\n *\n * @method client\n * @returns {String} client identifier\n */\nIban.prototype.client = function () {\n    return this.isIndirect() ? this._iban.substr(11) : '';\n};\n\n/**\n * Should be called to get client direct address\n *\n * @method toAddress\n * @returns {String} ethereum address\n */\nIban.prototype.toAddress = function () {\n    if (this.isDirect()) {\n        var base36 = this._iban.substr(4);\n        var asBn = new BigNumber(base36, 36);\n        return utils.toChecksumAddress(asBn.toString(16, 20));\n    }\n\n    return '';\n};\n\nIban.prototype.toString = function () {\n    return this._iban;\n};\n\nmodule.exports = Iban;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar _ = require('underscore');\nvar utils = require('web3-utils');\nvar Iban = require('web3-eth-iban');\n\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber} number\n * @returns {BigNumber} object\n */\nvar outputBigNumberFormatter = function (number) {\n    return utils.toBN(number).toString(10);\n};\n\nvar isPredefinedBlockNumber = function (blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n    if (this && (blockNumber === undefined || blockNumber === null)) {\n        return this.defaultBlock;\n    }\n    if (blockNumber === 'genesis' || blockNumber === 'earliest') {\n        return '0x0';\n    }\n    return inputBlockNumberFormatter(blockNumber);\n};\n\nvar inputBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined;\n    } else if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    return (utils.isHexStrict(blockNumber)) ? ((_.isString(blockNumber)) ? blockNumber.toLowerCase() : blockNumber) : utils.numberToHex(blockNumber);\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method _txInputFormatter\n * @param {Object} transaction options\n * @returns object\n */\nvar _txInputFormatter = function (options){\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    if (options.data && options.input) {\n        throw new Error('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n    }\n\n    if (!options.data && options.input) {\n        options.data = options.input;\n        delete options.input;\n    }\n\n    if(options.data && !utils.isHex(options.data)) {\n        throw new Error('The data field must be HEX encoded data.');\n    }\n\n    // allow both\n    if (options.gas || options.gasLimit) {\n        options.gas = options.gas || options.gasLimit;\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function(key){\n        options[key] = utils.numberToHex(options[key]);\n    });\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputCallFormatter = function (options){\n\n    options = _txInputFormatter(options);\n\n    var from = options.from || (this ? this.defaultAccount : null);\n\n    if (from) {\n        options.from = inputAddressFormatter(from);\n    }\n\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} options\n * @returns object\n*/\nvar inputTransactionFormatter = function (options) {\n\n    options = _txInputFormatter(options);\n\n    // check from, only if not number, or object\n    if (!_.isNumber(options.from) && !_.isObject(options.from)) {\n        options.from = options.from || (this ? this.defaultAccount : null);\n\n        if (!options.from && !_.isNumber(options.from)) {\n            throw new Error('The send transactions \"from\" field must be defined!');\n        }\n\n        options.from = inputAddressFormatter(options.from);\n    }\n\n    return options;\n};\n\n/**\n * Hex encodes the data passed to eth_sign and personal_sign\n *\n * @method inputSignFormatter\n * @param {String} data\n * @returns {String}\n */\nvar inputSignFormatter = function (data) {\n    return (utils.isHexStrict(data)) ? data : utils.utf8ToHex(data);\n};\n\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n*/\nvar outputTransactionFormatter = function (tx){\n    if(tx.blockNumber !== null)\n        tx.blockNumber = utils.hexToNumber(tx.blockNumber);\n    if(tx.transactionIndex !== null)\n        tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);\n    tx.nonce = utils.hexToNumber(tx.nonce);\n    tx.gas = utils.hexToNumber(tx.gas);\n    tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n    tx.value = outputBigNumberFormatter(tx.value);\n\n    if(tx.to && utils.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation\n        tx.to = utils.toChecksumAddress(tx.to);\n    } else {\n        tx.to = null; // set to `null` if invalid address\n    }\n\n    if(tx.from) {\n        tx.from = utils.toChecksumAddress(tx.from);\n    }\n\n    return tx;\n};\n\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n*/\nvar outputTransactionReceiptFormatter = function (receipt){\n    if(typeof receipt !== 'object') {\n        throw new Error('Received receipt is invalid: '+ receipt);\n    }\n\n    if(receipt.blockNumber !== null)\n        receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);\n    if(receipt.transactionIndex !== null)\n        receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);\n    receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);\n    receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);\n\n    if(_.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(outputLogFormatter);\n    }\n\n    if(receipt.contractAddress) {\n        receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);\n    }\n\n    if(typeof receipt.status !== 'undefined') {\n        receipt.status = Boolean(parseInt(receipt.status));\n    }\n\n    return receipt;\n};\n\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n*/\nvar outputBlockFormatter = function(block) {\n\n    // transform to number\n    block.gasLimit = utils.hexToNumber(block.gasLimit);\n    block.gasUsed = utils.hexToNumber(block.gasUsed);\n    block.size = utils.hexToNumber(block.size);\n    block.timestamp = utils.hexToNumber(block.timestamp);\n    if (block.number !== null)\n        block.number = utils.hexToNumber(block.number);\n\n    if(block.difficulty)\n        block.difficulty = outputBigNumberFormatter(block.difficulty);\n    if(block.totalDifficulty)\n        block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n\n    if (_.isArray(block.transactions)) {\n        block.transactions.forEach(function(item){\n            if(!_.isString(item))\n                return outputTransactionFormatter(item);\n        });\n    }\n\n    if (block.miner)\n        block.miner = utils.toChecksumAddress(block.miner);\n\n    return block;\n};\n\n/**\n * Formats the input of a log\n *\n * @method inputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar inputLogFormatter = function(options) {\n    var toTopic = function(value){\n\n        if(value === null || typeof value === 'undefined')\n            return null;\n\n        value = String(value);\n\n        if(value.indexOf('0x') === 0)\n            return value;\n        else\n            return utils.fromUtf8(value);\n    };\n\n    // make sure topics, get converted to hex\n    options.topics = options.topics || [];\n    options.topics = options.topics.map(function(topic){\n        return (_.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);\n    });\n\n    toTopic = null;\n\n    if (options.address) {\n        options.address = (_.isArray(options.address)) ? options.address.map(function (addr) {\n            return inputAddressFormatter(addr);\n        }) : inputAddressFormatter(options.address);\n    }\n\n    return options;\n};\n\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar outputLogFormatter = function(log) {\n\n    // generate a custom log id\n    if(typeof log.blockHash === 'string' &&\n       typeof log.transactionHash === 'string' &&\n       typeof log.logIndex === 'string') {\n        var shaId = utils.sha3(log.blockHash.replace('0x','') + log.transactionHash.replace('0x','') + log.logIndex.replace('0x',''));\n        log.id = 'log_'+ shaId.replace('0x','').substr(0,8);\n    } else if(!log.id) {\n        log.id = null;\n    }\n\n    if (log.blockNumber !== null)\n        log.blockNumber = utils.hexToNumber(log.blockNumber);\n    if (log.transactionIndex !== null)\n        log.transactionIndex = utils.hexToNumber(log.transactionIndex);\n    if (log.logIndex !== null)\n        log.logIndex = utils.hexToNumber(log.logIndex);\n\n    if (log.address) {\n        log.address = utils.toChecksumAddress(log.address);\n    }\n\n    return log;\n};\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n*/\nvar inputPostFormatter = function(post) {\n\n    // post.payload = utils.toHex(post.payload);\n\n    if (post.ttl)\n        post.ttl = utils.numberToHex(post.ttl);\n    if (post.workToProve)\n        post.workToProve = utils.numberToHex(post.workToProve);\n    if (post.priority)\n        post.priority = utils.numberToHex(post.priority);\n\n    // fallback\n    if (!_.isArray(post.topics)) {\n        post.topics = post.topics ? [post.topics] : [];\n    }\n\n    // format the following options\n    post.topics = post.topics.map(function(topic){\n        // convert only if not hex\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);\n    });\n\n    return post;\n};\n\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function(post){\n\n    post.expiry = utils.hexToNumber(post.expiry);\n    post.sent = utils.hexToNumber(post.sent);\n    post.ttl = utils.hexToNumber(post.ttl);\n    post.workProved = utils.hexToNumber(post.workProved);\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.hexToAscii(post.payload);\n\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n\n    // format the following options\n    if (!post.topics) {\n        post.topics = [];\n    }\n    post.topics = post.topics.map(function(topic){\n        return utils.toUtf8(topic);\n    });\n\n    return post;\n};\n\nvar inputAddressFormatter = function (address) {\n    var iban = new Iban(address);\n    if (iban.isValid() && iban.isDirect()) {\n        return iban.toAddress().toLowerCase();\n    } else if (utils.isAddress(address)) {\n        return '0x' + address.toLowerCase().replace('0x','');\n    }\n    throw new Error('Provided address \"'+ address +'\" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can\\'t be converted.');\n};\n\n\nvar outputSyncingFormatter = function(result) {\n\n    result.startingBlock = utils.hexToNumber(result.startingBlock);\n    result.currentBlock = utils.hexToNumber(result.currentBlock);\n    result.highestBlock = utils.hexToNumber(result.highestBlock);\n    if (result.knownStates) {\n        result.knownStates = utils.hexToNumber(result.knownStates);\n        result.pulledStates = utils.hexToNumber(result.pulledStates);\n    }\n\n    return result;\n};\n\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    inputLogFormatter: inputLogFormatter,\n    inputSignFormatter: inputSignFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter\n};\n\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\nvar _ = require('underscore');\nvar ethjsUnit = require('ethjs-unit');\nvar utils = require('./utils.js');\nvar soliditySha3 = require('./soliditySha3.js');\nvar randomHex = require('randomhex');\n\n\n\n/**\n * Fires an error in an event emitter and callback and returns the eventemitter\n *\n * @method _fireError\n * @param {Object} error a string, a error, or an object with {message, data}\n * @param {Object} emitter\n * @param {Function} reject\n * @param {Function} callback\n * @return {Object} the emitter\n */\nvar _fireError = function (error, emitter, reject, callback) {\n    /*jshint maxcomplexity: 10 */\n\n    // add data if given\n    if(_.isObject(error) && !(error instanceof Error) &&  error.data) {\n        if(_.isObject(error.data) || _.isArray(error.data)) {\n            error.data = JSON.stringify(error.data, null, 2);\n        }\n\n        error = error.message +\"\\n\"+ error.data;\n    }\n\n    if(_.isString(error)) {\n        error = new Error(error);\n    }\n\n    if (_.isFunction(callback)) {\n        callback(error);\n    }\n    if (_.isFunction(reject)) {\n        // suppress uncatched error if an error listener is present\n        // OR suppress uncatched error if an callback listener is present\n        if (emitter &&\n            (_.isFunction(emitter.listeners) &&\n            emitter.listeners('error').length) || _.isFunction(callback)) {\n            emitter.catch(function(){});\n        }\n        // reject later, to be able to return emitter\n        setTimeout(function () {\n            reject(error);\n        }, 1);\n    }\n\n    if(emitter && _.isFunction(emitter.emit)) {\n        // emit later, to be able to return emitter\n        setTimeout(function () {\n            emitter.emit('error', error);\n            emitter.removeAllListeners();\n        }, 1);\n    }\n\n    return emitter;\n};\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method _jsonInterfaceMethodToString\n * @param {Object} json\n * @return {String} full function/event name\n */\nvar _jsonInterfaceMethodToString = function (json) {\n    if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {\n        return json.name;\n    }\n\n    var typeName = json.inputs.map(function(i){return i.type; }).join(',');\n    return json.name + '(' + typeName + ')';\n};\n\n\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method hexToAscii\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToAscii = function(hex) {\n    if (!utils.isHexStrict(hex))\n        throw new Error('The parameter must be a valid HEX string.');\n\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method asciiToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar asciiToHex = function(str) {\n    if(!str)\n        return \"0x00\";\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n\n\n/**\n * Returns value of unit in Wei\n *\n * @method getUnitValue\n * @param {String} unit the unit to convert to, default ether\n * @returns {BN} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getUnitValue = function (unit) {\n    unit = unit ? unit.toLowerCase() : 'ether';\n    if (!ethjsUnit.unitMap[unit]) {\n        throw new Error('This unit \"'+ unit +'\" doesn\\'t exist, please use the one of the following units' + JSON.stringify(ethjsUnit.unitMap, null, 2));\n    }\n    return unit;\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar fromWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar toWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);\n};\n\n\n\n\n/**\n * Converts to a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @return {String}\n */\nvar toChecksumAddress = function (address) {\n    if (typeof address === 'undefined') return '';\n\n    if(!/^(0x)?[0-9a-f]{40}$/i.test(address))\n        throw new Error('Given address \"'+ address +'\" is not a valid Ethereum address.');\n\n\n\n    address = address.toLowerCase().replace(/^0x/i,'');\n    var addressHash = utils.sha3(address).replace(/^0x/i,'');\n    var checksumAddress = '0x';\n\n    for (var i = 0; i < address.length; i++ ) {\n        // If ith character is 9 to f then make it uppercase\n        if (parseInt(addressHash[i], 16) > 7) {\n            checksumAddress += address[i].toUpperCase();\n        } else {\n            checksumAddress += address[i];\n        }\n    }\n    return checksumAddress;\n};\n\n\n\nmodule.exports = {\n    _fireError: _fireError,\n    _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,\n    // extractDisplayName: extractDisplayName,\n    // extractTypeName: extractTypeName,\n    randomHex: randomHex,\n    _: _,\n    BN: utils.BN,\n    isBN: utils.isBN,\n    isBigNumber: utils.isBigNumber,\n    isHex: utils.isHex,\n    isHexStrict: utils.isHexStrict,\n    sha3: utils.sha3,\n    keccak256: utils.sha3,\n    soliditySha3: soliditySha3,\n    isAddress: utils.isAddress,\n    checkAddressChecksum: utils.checkAddressChecksum,\n    toChecksumAddress: toChecksumAddress,\n    toHex: utils.toHex,\n    toBN: utils.toBN,\n\n    bytesToHex: utils.bytesToHex,\n    hexToBytes: utils.hexToBytes,\n\n    hexToNumberString: utils.hexToNumberString,\n\n    hexToNumber: utils.hexToNumber,\n    toDecimal: utils.hexToNumber, // alias\n\n    numberToHex: utils.numberToHex,\n    fromDecimal: utils.numberToHex, // alias\n\n    hexToUtf8: utils.hexToUtf8,\n    hexToString: utils.hexToUtf8,\n    toUtf8: utils.hexToUtf8,\n\n    utf8ToHex: utils.utf8ToHex,\n    stringToHex: utils.utf8ToHex,\n    fromUtf8: utils.utf8ToHex,\n\n    hexToAscii: hexToAscii,\n    toAscii: hexToAscii,\n    asciiToHex: asciiToHex,\n    fromAscii: asciiToHex,\n\n    unitMap: ethjsUnit.unitMap,\n    toWei: toWei,\n    fromWei: fromWei,\n\n    padLeft: utils.leftPad,\n    leftPad: utils.leftPad,\n    padRight: utils.rightPad,\n    rightPad: utils.rightPad,\n    toTwosComplement: utils.toTwosComplement\n};\n\n","var f = require('./formatters');\nvar SolidityParam = require('./param');\n\n/**\n * SolidityType prototype is used to encode/decode solidity params of certain type\n */\nvar SolidityType = function (config) {\n    this._inputFormatter = config.inputFormatter;\n    this._outputFormatter = config.outputFormatter;\n};\n\n/**\n * Should be used to determine if this SolidityType do match given name\n *\n * @method isType\n * @param {String} name\n * @return {Bool} true if type match this SolidityType, otherwise false\n */\nSolidityType.prototype.isType = function (name) {\n    throw \"This method should be overwritten for type \" + name;\n};\n\n/**\n * Should be used to determine what is the length of static part in given type\n *\n * @method staticPartLength\n * @param {String} name\n * @return {Number} length of static part in bytes\n */\nSolidityType.prototype.staticPartLength = function (name) {\n    // If name isn't an array then treat it like a single element array.\n    return (this.nestedTypes(name) || ['[1]'])\n        .map(function (type) {\n            // the length of the nested array\n            return parseInt(type.slice(1, -1), 10) || 1;\n        })\n        .reduce(function (previous, current) {\n            return previous * current;\n        // all basic types are 32 bytes long\n        }, 32);\n};\n\n/**\n * Should be used to determine if type is dynamic array\n * eg:\n * \"type[]\" => true\n * \"type[4]\" => false\n *\n * @method isDynamicArray\n * @param {String} name\n * @return {Bool} true if the type is dynamic array\n */\nSolidityType.prototype.isDynamicArray = function (name) {\n    var nestedTypes = this.nestedTypes(name);\n    return !!nestedTypes && !nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);\n};\n\n/**\n * Should be used to determine if type is static array\n * eg:\n * \"type[]\" => false\n * \"type[4]\" => true\n *\n * @method isStaticArray\n * @param {String} name\n * @return {Bool} true if the type is static array\n */\nSolidityType.prototype.isStaticArray = function (name) {\n    var nestedTypes = this.nestedTypes(name);\n    return !!nestedTypes && !!nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);\n};\n\n/**\n * Should return length of static array\n * eg.\n * \"int[32]\" => 32\n * \"int256[14]\" => 14\n * \"int[2][3]\" => 3\n * \"int\" => 1\n * \"int[1]\" => 1\n * \"int[]\" => 1\n *\n * @method staticArrayLength\n * @param {String} name\n * @return {Number} static array length\n */\nSolidityType.prototype.staticArrayLength = function (name) {\n    var nestedTypes = this.nestedTypes(name);\n    if (nestedTypes) {\n       return parseInt(nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g) || 1);\n    }\n    return 1;\n};\n\n/**\n * Should return nested type\n * eg.\n * \"int[32]\" => \"int\"\n * \"int256[14]\" => \"int256\"\n * \"int[2][3]\" => \"int[2]\"\n * \"int\" => \"int\"\n * \"int[]\" => \"int\"\n *\n * @method nestedName\n * @param {String} name\n * @return {String} nested name\n */\nSolidityType.prototype.nestedName = function (name) {\n    // remove last [] in name\n    var nestedTypes = this.nestedTypes(name);\n    if (!nestedTypes) {\n        return name;\n    }\n\n    return name.substr(0, name.length - nestedTypes[nestedTypes.length - 1].length);\n};\n\n/**\n * Should return true if type has dynamic size by default\n * such types are \"string\", \"bytes\"\n *\n * @method isDynamicType\n * @param {String} name\n * @return {Bool} true if is dynamic, otherwise false\n */\nSolidityType.prototype.isDynamicType = function () {\n    return false;\n};\n\n/**\n * Should return array of nested types\n * eg.\n * \"int[2][3][]\" => [\"[2]\", \"[3]\", \"[]\"]\n * \"int[] => [\"[]\"]\n * \"int\" => null\n *\n * @method nestedTypes\n * @param {String} name\n * @return {Array} array of nested types\n */\nSolidityType.prototype.nestedTypes = function (name) {\n    // return list of strings eg. \"[]\", \"[3]\", \"[]\", \"[2]\"\n    return name.match(/(\\[[0-9]*\\])/g);\n};\n\n/**\n * Should be used to encode the value\n *\n * @method encode\n * @param {Object} value\n * @param {String} name\n * @return {String} encoded value\n */\nSolidityType.prototype.encode = function (value, name) {\n    var self = this;\n    if (this.isDynamicArray(name)) {\n\n        return (function () {\n            var length = value.length;                          // in int\n            var nestedName = self.nestedName(name);\n\n            var result = [];\n            result.push(f.formatInputInt(length).encode());\n\n            value.forEach(function (v) {\n                result.push(self.encode(v, nestedName));\n            });\n\n            return result;\n        })();\n\n    } else if (this.isStaticArray(name)) {\n\n        return (function () {\n            var length = self.staticArrayLength(name);          // in int\n            var nestedName = self.nestedName(name);\n\n            var result = [];\n            for (var i = 0; i < length; i++) {\n                result.push(self.encode(value[i], nestedName));\n            }\n\n            return result;\n        })();\n\n    }\n\n    return this._inputFormatter(value, name).encode();\n};\n\n/**\n * Should be used to decode value from bytes\n *\n * @method decode\n * @param {String} bytes\n * @param {Number} offset in bytes\n * @param {String} name type name\n * @returns {Object} decoded value\n */\nSolidityType.prototype.decode = function (bytes, offset, name) {\n    var self = this;\n\n    if (this.isDynamicArray(name)) {\n\n        return (function () {\n            var arrayOffset = parseInt('0x' + bytes.substr(offset * 2, 64)); // in bytes\n            var length = parseInt('0x' + bytes.substr(arrayOffset * 2, 64)); // in int\n            var arrayStart = arrayOffset + 32; // array starts after length; // in bytes\n\n            var nestedName = self.nestedName(name);\n            var nestedStaticPartLength = self.staticPartLength(nestedName);  // in bytes\n            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;\n            var result = [];\n\n            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {\n                result.push(self.decode(bytes, arrayStart + i, nestedName));\n            }\n\n            return result;\n        })();\n\n    } else if (this.isStaticArray(name)) {\n\n        return (function () {\n            var length = self.staticArrayLength(name);                      // in int\n            var arrayStart = offset;                                        // in bytes\n\n            var nestedName = self.nestedName(name);\n            var nestedStaticPartLength = self.staticPartLength(nestedName); // in bytes\n            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;\n            var result = [];\n\n            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {\n                result.push(self.decode(bytes, arrayStart + i, nestedName));\n            }\n\n            return result;\n        })();\n    } else if (this.isDynamicType(name)) {\n\n        return (function () {\n            var dynamicOffset = parseInt('0x' + bytes.substr(offset * 2, 64));      // in bytes\n            var length = parseInt('0x' + bytes.substr(dynamicOffset * 2, 64));      // in bytes\n            var roundedLength = Math.floor((length + 31) / 32);                     // in int\n            var param = new SolidityParam(bytes.substr(dynamicOffset * 2, ( 1 + roundedLength) * 64), 0, bytes);\n            return self._outputFormatter(param, name);\n        })();\n    }\n\n    var length = this.staticPartLength(name);\n    var param = new SolidityParam(bytes.substr(offset * 2, length * 2), undefined, bytes);\n    return this._outputFormatter(param, name);\n};\n\nmodule.exports = SolidityType;\n","var f = require('../formatters');\nvar SolidityType = require('../type');\n\nvar SolidityTypeString = function () {\n    this._inputFormatter = f.formatInputString;\n    this._outputFormatter = f.formatOutputString;\n};\n\nSolidityTypeString.prototype = new SolidityType({});\nSolidityTypeString.prototype.constructor = SolidityTypeString;\n\nSolidityTypeString.prototype.isType = function (name) {\n    return !!name.match(/^string(\\[([0-9]*)\\])*$/);\n};\n\nSolidityTypeString.prototype.isDynamicType = function () {\n    return true;\n};\n\nmodule.exports = SolidityTypeString;\n"],"sourceRoot":""}